apply plugin: 'com.android.application'

task processWithJavassist << {
    //项目编译class所在目录
    String classPath = file('build/intermediates/classes/debug')
    String hackBuildPach = project(':hackdex').buildDir.absolutePath + '/intermediates/classes/debug'
    String resourcePath = file('src/main/java/com/hotfix')
    def file = file("../patch.properties")
    if (file) {
        com.groovy.BuildGroovy.process(resourcePath, classPath, hackBuildPach, file)
    }
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.hotfix"
        minSdkVersion Integer.parseInt(project.MINI_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        variant.dex.dependsOn processWithJavassist //在执行dx命令之前将代码打入到class中
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile project(':hotfixlib')
}

def getSdkDir = {
    def file = file("../local.properties")
    Properties p = new Properties()
    file.withInputStream { stream ->
        p.load(stream)
    }
    return p.'sdk.dir'
}

task createHack(type: Exec) {
    workingDir getSdkDir() + '\\build-tools\\' + project.BUILD_TOOLS_VERSION
    commandLine 'cmd', '/c', 'dx --dex --output ' + project.rootDir + '/app/src/main/assets/hack_dex.jar ' + project.rootDir + '/hackdex/build/intermediates/bundles/debug/classes.jar'
}

task copyPatchClass() << {
    def file = file("../patch.properties")
    if (file) {
        List<String> lines = file.readLines();
        for (line in lines) {
            if (line.startsWith('#')) {
                continue;
            }
            def className = line.replace('.', '/') + '.class'
            def classPath = project.rootDir.path + '/app/build/intermediates/classes/debug/' + className
            com.groovy.BuildGroovy.copyFile(classPath, project.rootDir.path + '/app/patch/' + className)
        }
    }
}

task createPatchJar(type: Jar, dependsOn: copyPatchClass) {
    baseName 'patch'
    from('patch/com/hotfix/demo/text/')
    into('app/src/main/assets/')
    //commandLine 'cmd','/k','d:'
    //commandLine 'cmd','/k','cd '+project.rootDir.path + '/app/patch/'
    //commandLine 'cmd','/c','jar cvf  '+project.rootDir.path + '/app/src/main/assets/patch.jar com/*'
}

task createPatchDex(dependsOn: createPatchJar) << {
    //workingDir getSdkDir() + '\\build-tools\\' + project.BUILD_TOOLS_VERSION
    // commandLine 'cmd', '/c', 'dx --dex --output ' + project.rootDir + '/app/src/main/assets/patch_dex.jar ' + project.rootDir + '/app/src/main/assets/patch.jar'
}

task createPatch(dependsOn: createPatchDex) << {
    def file = file('src/main/assets/patch.jar')
    def fileClass = file('src/main/assets/com/')
    if (file.exists()) {
        file.delete()
    }
    if (fileClass.exists()) {
        fileClass.deleteDir()
    }
}
